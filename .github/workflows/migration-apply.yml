name: Migration apply
on:
  workflow_dispatch:

jobs:
  migrate:
    environment: production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

#      - name: Use the environment variable
#        run: |
#          echo "The security group is ${{ vars.AWS_SECURITY_GROUP_ID }}"

      - name: Add IP to Security Group
        uses: passeidireto/aws-add-ip-to-security-group-action@v1.0.0
        with:
          aws_security_group_ids:  ${{ vars.AWS_SECURITY_GROUP_ID }}
          port_range: '${{ secrets.DB_PORT }}-${{ secrets.DB_PORT }}'

      - name: Install Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'

      - name: Configure build environment
        run: |
          sudo apt-get update && sudo apt-get install -y wget curl unzip
          sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/*
      - name: Install Goose
        run: |
          go install github.com/pressly/goose/v3/cmd/goose@latest
          echo "$HOME/go/bin" >> $GITHUB_PATH
      - name: Verify Goose installation
        run: |
          goose --version
          if [ $? -ne 0 ]; then
            echo "Goose is not installed correctly. Exiting."
            exit 1
          fi
      - name: Set up environment variables
        run: |
          export GOOSE_MIGRATIONS_DIR=./migrations
          export GOOSE_DRIVER=postgres
          export GOOSE_DBSTRING=postgres://${{ secrets.DB_USERNAME }}:${{ secrets.DB_PASSWORD }}@${{ secrets.DB_HOST }}:${{ secrets.DB_PORT }}/${{ secrets.DB_NAME }}?sslmode=disable&search_path=${{ secrets.DB_SCHEMA }}
          export PGPASSWORD=${{ secrets.DB_PASSWORD }}

      # Configurar variáveis de ambiente
      - name: Set up environment variables
        run: |
          echo "GOOSE_MIGRATIONS_DIR=./migrations" >> $GITHUB_ENV
          echo "GOOSE_DRIVER=postgres" >> $GITHUB_ENV
          echo "GOOSE_DBSTRING=postgres://${{ secrets.DB_USERNAME }}:${{ secrets.DB_PASSWORD }}@${{ secrets.DB_HOST }}:${{ secrets.DB_PORT }}/${{ secrets.DB_NAME }}?sslmode=disable&search_path=${{ secrets.DB_SCHEMA }}" >> $GITHUB_ENV
          echo "PGPASSWORD=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV

      - name: List migration files
        run: |
          ls -la $GOOSE_MIGRATIONS_DIR

      # Verificar se migrações são necessárias
      - name: Check if migrations are needed
        run: |
          if ! goose -dir $GOOSE_MIGRATIONS_DIR  status | grep -q "Pending"; then
            echo "No pending migrations found."
            exit 0
          fi

      # Aplicar migrações
      - name: Apply migrations
        id: apply-migrations
        run: |
          goose -dir $GOOSE_MIGRATIONS_DIR up
          goose -dir $GOOSE_MIGRATIONS_DIR status

      - name: Set output based on test result
        id: set_output
        run: |
          if [ "${{ steps.apply-migrations.conclusion }}" == "failure" ]; then
            echo "migration_failed=true" >> $GITHUB_OUTPUT
          else
            echo "migration_failed=false" >> $GITHUB_OUTPUT
          fi

  rollback:
    needs: migrate
    if: ${{ needs.migrate.outputs.migration_failed == 'true' }}
    environment: production
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Add IP to Security Group
        uses: passeidireto/aws-add-ip-to-security-group-action@v1.0.0
        with:
          aws_security_group_ids: ${{ vars.AWS_SECURITY_GROUP_ID }}
          port_range: '${{ secrets.DB_PORT }}-${{ secrets.DB_PORT }}'

      - name: Rollback migrations
        run: |
          goose -dir $GOOSE_MIGRATIONS_DIR -s down
          goose -dir $GOOSE_MIGRATIONS_DIR -s status