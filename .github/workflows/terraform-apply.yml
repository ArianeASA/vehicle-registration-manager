name: reuse apply

on:
  workflow_call:
    inputs:
      app_name:
        type: string
        required: true

jobs:
  terraform-apply:
    name: Terraform
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: |
          terraform -chdir=deployments init \
              -backend-config="key=states-${{inputs.app_name}}-ecs" \
              -backend-config="bucket=terraforms-bucket" \
              -backend-config="region=${{ secrets.AWS_REGION }}" \
              -var "db_username=${{ secrets.DB_USERNAME }}" \
              -var "db_password=${{ secrets.DB_PASSWORD }}" \
              -var "db_name=${{ secrets.DB_NAME }}" \
              -var "db_driver=${{ secrets.DB_DRIVER }}" \
              -var "db_schema=${{ secrets.DB_SCHEMA }}" \
              -var "scope=${{ secrets.DB_SCOPE }}"
          

      - name: Terraform Validate
        run: terraform  validate

      # Generates an execution plan for Terraform
      - name: Terraform Plan
#        if: ${{ github.event_name == 'pull_request' || github.ref == 'refs/heads/main' }}
        run: |
          terraform -chdir=deployments plan \
              -var 'aws_region=${{ secrets.AWS_REGION }}' \
              -var 'account_id=${{ secrets.ACCOUNT_ID }}' \
              -var 'access_key=${{ secrets.AWS_ACCESS_KEY_ID }}' \
              -var 'secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}' \
              -var "db_username=${{ secrets.DB_USERNAME }}" \
              -var "db_password=${{ secrets.DB_PASSWORD }}" \
              -var "db_name=${{ secrets.DB_NAME }}" \
              -var "db_driver=${{ secrets.DB_DRIVER }}" \
              -var "db_schema=${{ secrets.DB_SCHEMA }}" \
              -var "scope=${{ secrets.DB_SCOPE }}"
        

        # On push to "master", build or change infrastructure according to Terraform configuration files
        # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform Apply
#        if: github.ref == 'refs/heads/main'
        run: |
          terraform -chdir=deployments apply \
              -auto-approve \
              -var 'aws_region=${{ secrets.AWS_REGION }}' \
              -var 'access_key=${{ secrets.AWS_ACCESS_KEY_ID }}' \
              -var 'secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}' \
              -var 'account_id=${{ secrets.ACCOUNT_ID }}' \
              -var "db_username=${{ secrets.DB_USERNAME }}" \
              -var "db_password=${{ secrets.DB_PASSWORD }}" \
              -var "db_name=${{ secrets.DB_NAME }}" \
              -var "db_driver=${{ secrets.DB_DRIVER }}" \
              -var "db_schema=${{ secrets.DB_SCHEMA }}" \
              -var "scope=${{ secrets.DB_SCOPE }}"

#      - name: Capture Terraform Output
#        id: capture_output
#        run: |
#          echo "AWS_SG_ID<<EOF" >> $GITHUB_ENV
#          terraform output -raw rds_security_group_id >> $GITHUB_ENV
#          echo "EOF" >> $GITHUB_ENV
      - name: Capture Terraform Output
        id: capture_output
        run: |
          AWS_SG_ID=$(terraform output -raw rds_security_group_id)
          echo "AWS_SG_ID=$AWS_SG_ID" >> $GITHUB_ENV

      - name: Update GitHub Secret
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_APP }}
          MY_SECRET: ${{ env.AWS_SG_ID }}
        run: |
          curl -X PUT \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{\"encrypted_value\":\"$MY_SECRET\"}" \
            https://api.github.com/repos/ArianeASA/vehicle-registration-manager/actions/secrets/AWS_SECURITY_GROUP_ID