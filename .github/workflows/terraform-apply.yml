name: reuse apply

on:
  workflow_call:
    inputs:
      app_name:
        type: string
        required: true
env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  terraform-apply:
    name: Terraform
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: |
          terraform -chdir=deployments init \
              -backend-config="key=states-${{inputs.app_name}}-ecs.tfstate" \
              -backend-config="bucket=terraforms-bucket" \
              -backend-config="region=${{ secrets.AWS_REGION }}" \
              -var "db_username=${{ secrets.DB_USERNAME }}" \
              -var "db_password=${{ secrets.DB_PASSWORD }}" \
              -var "db_name=${{ secrets.DB_NAME }}" \
              -var "db_driver=${{ secrets.DB_DRIVER }}" \
              -var "db_schema=${{ secrets.DB_SCHEMA }}" \
              -var "scope=${{ secrets.DB_SCOPE }}"
          

      - name: Terraform Validate
        run: terraform  validate

      # Generates an execution plan for Terraform
      - name: Terraform Plan
#        if: ${{ github.event_name == 'pull_request' || github.ref == 'refs/heads/main' }}
        run: |
          terraform -chdir=deployments plan \
              -var 'aws_region=${{ secrets.AWS_REGION }}' \
              -var 'account_id=${{ secrets.ACCOUNT_ID }}' \
              -var 'access_key=${{ secrets.AWS_ACCESS_KEY_ID }}' \
              -var 'secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}' \
              -var "db_username=${{ secrets.DB_USERNAME }}" \
              -var "db_password=${{ secrets.DB_PASSWORD }}" \
              -var "db_name=${{ secrets.DB_NAME }}" \
              -var "db_driver=${{ secrets.DB_DRIVER }}" \
              -var "db_schema=${{ secrets.DB_SCHEMA }}" \
              -var "scope=${{ secrets.DB_SCOPE }}"
        

        # On push to "master", build or change infrastructure according to Terraform configuration files
        # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform Apply
#        if: github.ref == 'refs/heads/main'
        run: |
          terraform -chdir=deployments apply \
              -auto-approve \
              -var 'aws_region=${{ secrets.AWS_REGION }}' \
              -var 'access_key=${{ secrets.AWS_ACCESS_KEY_ID }}' \
              -var 'secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}' \
              -var 'account_id=${{ secrets.ACCOUNT_ID }}' \
              -var "db_username=${{ secrets.DB_USERNAME }}" \
              -var "db_password=${{ secrets.DB_PASSWORD }}" \
              -var "db_name=${{ secrets.DB_NAME }}" \
              -var "db_driver=${{ secrets.DB_DRIVER }}" \
              -var "db_schema=${{ secrets.DB_SCHEMA }}" \
              -var "scope=${{ secrets.DB_SCOPE }}"


  get_outputs:
    needs: terraform-apply
    name: Terraform-output
    environment: production
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Download Terraform state file
        run: |
          aws s3 cp s3://terraforms-bucket/states-${{inputs.app_name}}-ecs.tfstate terraform.tfstate

      - name: Extract outputs from state file
        run: |
          python .github/workflows/extract_outputs.py terraform.tfstate rds_security_group_id

      - name: Use the environment variable
        run: |
          echo "The desired output is ${{ env.RDS_SECURITY_GROUP_ID }}"

      - name: Update GitHub ENV
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_APP }}
          MY_ENV: ${{ env.RDS_SECURITY_GROUP_ID }}
        run: |
          curl -L \
            -X PATCH \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            -d "{\"name\":\"AWS_SECURITY_GROUP_ID\",\"value\":\"$MY_ENV\"}"
                https://api.github.com/repos/ArianeASA/vehicle-registration-manager/environments/production/variables/AWS_SECURITY_GROUP_ID
